openapi: 3.1.0
info:
  title: Task Management System API
  description: >-
    A comprehensive task management system with user authentication and project
    organization
  contact:
    name: Task Management Team
    email: support@taskmanagement.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: Development server
  - url: 'https://your-api.herokuapp.com'
    description: Production server
security:
  - bearerAuth: [ ]
tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Projects
    description: Project management endpoints
  - name: Dashboard
    description: Dashboard data and analytics endpoints
  - name: Tasks
    description: Task management endpoints
paths:
  '/api/tasks/{taskId}':
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Retrieve a single task by its ID
      operationId: getTask
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
    put:
      tags:
        - Tasks
      summary: Update task
      description: Update an existing task by ID
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
        required: true
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete a task by ID
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  '/api/projects/{projectId}':
    get:
      tags:
        - Projects
      summary: Get project by ID
      description: Retrieves a specific project by its ID
      operationId: getProject
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
    put:
      tags:
        - Projects
      summary: Update project
      description: Updates an existing project
      operationId: updateProject
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
        required: true
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '409':
          description: Project name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
    delete:
      tags:
        - Projects
      summary: Delete project
      description: Deletes a project and all its associated tasks
      operationId: deleteProject
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/tasks:
    get:
      tags:
        - Tasks
      summary: List tasks
      description: >-
        Retrieve paginated tasks for the authenticated user with optional
        filters
      operationId: getTasks
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            format: int32
            default: 20
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          schema:
            type: string
            default: createdAt
        - name: sortDirection
          in: query
          description: 'Sort direction: asc|desc'
          required: false
          schema:
            type: string
            default: desc
        - name: status
          in: query
          description: Filter by task status
          required: false
          schema:
            type: string
            enum:
              - TODO
              - IN_PROGRESS
              - DONE
              - CANCELLED
        - name: priority
          in: query
          description: Filter by task priority
          required: false
          schema:
            type: string
            enum:
              - LOW
              - MEDIUM
              - HIGH
              - CRITICAL
        - name: projectId
          in: query
          description: Filter by project ID
          required: false
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          description: Search text in title/description
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTaskResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTaskResponse'
    post:
      tags:
        - Tasks
      summary: Create task
      description: Create a new task for the authenticated user
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
        required: true
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
  /api/projects:
    get:
      tags:
        - Projects
      summary: Get user projects
      description: Retrieves all projects belonging to the authenticated user
      operationId: getUserProjects
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
    post:
      tags:
        - Projects
      summary: Create new project
      description: Creates a new project for the authenticated user
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        required: true
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '409':
          description: Project name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account with email verification
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Exchanges a valid refresh token for a new access token
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout current user
      description: Invalidates the current user's active tokens
      operationId: logout
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates user and returns JWT tokens
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /api/projects/upcoming-deadlines:
    get:
      tags:
        - Projects
      summary: Get projects with upcoming deadlines
      description: Retrieves projects with deadlines in the next N days
      operationId: getUpcomingDeadlines
      parameters:
        - name: days
          in: query
          description: Number of days ahead to check
          required: false
          schema:
            type: integer
            format: int32
            default: 7
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
  /api/projects/summary:
    get:
      tags:
        - Projects
      summary: Get project summaries
      description: Retrieves project summaries with task statistics for dashboard
      operationId: getProjectSummaries
      responses:
        '200':
          description: Project summaries retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectSummaryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectSummaryResponse'
  /api/projects/search:
    get:
      tags:
        - Projects
      summary: Search projects
      description: Search projects by name or description
      operationId: searchProjects
      parameters:
        - name: query
          in: query
          description: Search term
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
  /api/dashboard/task-stats:
    get:
      tags:
        - Dashboard
      summary: Get task statistics
      description: Retrieves detailed task statistics
      operationId: getTaskStatistics
      parameters:
        - name: days
          in: query
          description: Number of days to include in stats
          required: false
          schema:
            type: integer
            format: int32
            default: 30
      responses:
        '200':
          description: Task stats retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatsResponse'
  /api/dashboard/summary:
    get:
      tags:
        - Dashboard
      summary: Get dashboard summary
      description: Retrieves overall dashboard statistics
      operationId: getDashboardSummary
      responses:
        '200':
          description: Summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummaryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummaryResponse'
  /api/dashboard/recent-activity:
    get:
      tags:
        - Dashboard
      summary: Get recent activity
      description: Retrieves recent user activity
      operationId: getRecentActivity
      parameters:
        - name: limit
          in: query
          description: Maximum number of activity items
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: Recent activity retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityResponse'
  /api/dashboard/project-stats:
    get:
      tags:
        - Dashboard
      summary: Get project statistics
      description: Retrieves project progress statistics
      operationId: getProjectStatistics
      responses:
        '200':
          description: Project stats retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatsResponse'
  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      description: Fetches information about the currently authenticated user
      operationId: getCurrentUser
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /api/auth/me/optional:
    get:
      tags:
        - Authentication
      summary: Get current user (optional authentication)
      description: >-
        Returns user info if valid authentication is provided, otherwise returns
        appropriate error status
      operationId: getCurrentUserOptional
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionalAuthResponse'
        '400':
          description: Bad request - invalid token format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionalAuthResponse'
        '401':
          description: 'Unauthorized - missing, invalid, or expired token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionalAuthResponse'
        '403':
          description: Forbidden - valid token but account issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionalAuthResponse'
        '404':
          description: Not found - user account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionalAuthResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionalAuthResponse'
components:
  schemas:
    TaskUpdateRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
          minLength: 0
        description:
          type: string
          maxLength: 1000
          minLength: 0
        status:
          type: string
          enum:
            - TODO
            - IN_PROGRESS
            - DONE
            - CANCELLED
        priority:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        dueDate:
          type: string
          format: date
        projectId:
          type: string
          format: uuid
    AttachmentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        originalFilename:
          type: string
        mimeType:
          type: string
        fileSize:
          type: integer
          format: int64
        formattedFileSize:
          type: string
        fileExtension:
          type: string
        isImage:
          type: boolean
        uploadedAt:
          type: string
          format: date-time
    TaskResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - TODO
            - IN_PROGRESS
            - DONE
            - CANCELLED
        priority:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        dueDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        projectName:
          type: string
        projectId:
          type: string
          format: uuid
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentResponse'
        isOverdue:
          type: boolean
        isDueToday:
          type: boolean
    ProjectUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
          minLength: 0
        description:
          type: string
          maxLength: 500
          minLength: 0
        color:
          type: string
          pattern: '^#([0-9A-Fa-f]{6})$'
        deadline:
          type: string
          format: date-time
      required:
        - name
    ProjectResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        color:
          type: string
        deadline:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        taskCount:
          type: integer
          format: int32
        completedTaskCount:
          type: integer
          format: int32
        progress:
          type: number
          format: double
        isOverdue:
          type: boolean
    TaskCreateRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
          minLength: 0
        description:
          type: string
          maxLength: 1000
          minLength: 0
        priority:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        dueDate:
          type: string
          format: date
        projectId:
          type: string
          format: uuid
      required:
        - title
    ProjectCreateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
          minLength: 0
        description:
          type: string
          maxLength: 500
          minLength: 0
        color:
          type: string
          pattern: '^#([0-9A-Fa-f]{6})$'
        deadline:
          type: string
          format: date-time
      required:
        - name
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 50
          minLength: 3
          pattern: '^[a-zA-Z0-9_-]+$'
        email:
          type: string
          maxLength: 100
          minLength: 0
        firstName:
          type: string
          maxLength: 50
          minLength: 0
        lastName:
          type: string
          maxLength: 50
          minLength: 0
        password:
          type: string
          maxLength: 2147483647
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$'
      required:
        - email
        - firstName
        - lastName
        - password
        - username
    AuthResponse:
      type: object
      properties:
        message:
          type: string
        userId:
          type: string
          format: uuid
        success:
          type: boolean
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          minLength: 1
      required:
        - refreshToken
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
        expiresIn:
          type: integer
          format: int64
        refreshExpiresIn:
          type: integer
          format: int64
    MessageResponse:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
        timestamp:
          type: string
          format: date-time
        code:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
        rememberMe:
          type: boolean
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
        expiresIn:
          type: integer
          format: int64
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
        profilePicture:
          type: string
        isActive:
          type: boolean
        emailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time
    PageTaskResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        unpaged:
          type: boolean
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    ProjectSummaryResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        color:
          type: string
        totalTasks:
          type: integer
          format: int32
        completedTasks:
          type: integer
          format: int32
        progress:
          type: number
          format: double
        deadline:
          type: string
          format: date-time
        isOverdue:
          type: boolean
    DailyTaskStats:
      type: object
      properties:
        date:
          type: string
          format: date
        created:
          type: integer
          format: int32
        completed:
          type: integer
          format: int32
        totalActive:
          type: integer
          format: int32
    TaskStatsResponse:
      type: object
      properties:
        statusCounts:
          type: object
          additionalProperties:
            type: integer
            format: int64
        priorityCounts:
          type: object
          additionalProperties:
            type: integer
            format: int64
        dailyStats:
          type: array
          items:
            $ref: '#/components/schemas/DailyTaskStats'
        periodDays:
          type: integer
          format: int32
    DashboardSummaryResponse:
      type: object
      properties:
        totalTasks:
          type: integer
          format: int32
        completedTasks:
          type: integer
          format: int32
        pendingTasks:
          type: integer
          format: int32
        overdueTasks:
          type: integer
          format: int32
        dueTodayTasks:
          type: integer
          format: int32
        totalProjects:
          type: integer
          format: int32
        projectsWithDeadlines:
          type: integer
          format: int32
        overdueProjects:
          type: integer
          format: int32
        completionRate:
          type: number
          format: double
        generatedAt:
          type: string
          format: date-time
    ActivityResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - TASK_CREATED
            - TASK_UPDATED
            - TASK_COMPLETED
            - TASK_DELETED
            - TASK_STATUS_CHANGED
            - TASK_PRIORITY_CHANGED
            - TASK_DUE_DATE_CHANGED
            - TASK_ASSIGNED
            - PROJECT_CREATED
            - PROJECT_UPDATED
            - PROJECT_COMPLETED
            - PROJECT_DELETED
            - PROJECT_DEADLINE_CHANGED
            - USER_LOGGED_IN
            - USER_PROFILE_UPDATED
        title:
          type: string
        description:
          type: string
        entityType:
          type: string
        entityId:
          type: string
          format: uuid
        entityName:
          type: string
        metadata:
          type: object
          additionalProperties: { }
        timestamp:
          type: string
          format: date-time
        timeAgo:
          type: string
        icon:
          type: string
        color:
          type: string
    ProjectProgressStats:
      type: object
      properties:
        projectId:
          type: string
        projectName:
          type: string
        projectColor:
          type: string
        totalTasks:
          type: integer
          format: int32
        completedTasks:
          type: integer
          format: int32
        progressPercentage:
          type: number
          format: double
        deadline:
          type: string
          format: date-time
        isOverdue:
          type: boolean
        daysUntilDeadline:
          type: integer
          format: int32
    ProjectStatsResponse:
      type: object
      properties:
        totalProjects:
          type: integer
          format: int32
        activeProjects:
          type: integer
          format: int32
        completedProjects:
          type: integer
          format: int32
        overdueProjects:
          type: integer
          format: int32
        projectsWithUpcomingDeadlines:
          type: integer
          format: int32
        averageCompletionRate:
          type: number
          format: double
        projectProgress:
          type: array
          items:
            $ref: '#/components/schemas/ProjectProgressStats'
        projectsByMonth:
          type: object
          additionalProperties:
            type: integer
            format: int32
        generatedAt:
          type: string
          format: date-time
    OptionalAuthResponse:
      type: object
      properties:
        authenticated:
          type: boolean
        user:
          $ref: '#/components/schemas/UserResponse'
        message:
          type: string
        httpStatus:
          type: string
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT Authorization header using the Bearer scheme
      scheme: bearer
      bearerFormat: JWT
