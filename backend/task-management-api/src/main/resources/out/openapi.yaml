openapi: 3.0.3
info:
  title: Task Management System API
  description: A comprehensive task management system with user authentication and project organization
  version: 1.0.0
  contact:
    name: Task Management Team
    email: support@taskmanagement.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://your-api.herokuapp.com
    description: Production server

security:
  - bearerAuth: [ ]

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account with email verification
      operationId: registerUser
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              username: "john_doe"
              email: "john@example.com"
              firstName: "John"
              lastName: "Doe"
              password: "SecurePass123!"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                message: "Registration successful. Please check email for verification."
                userId: "550e8400-e29b-41d4-a716-446655440000"
                success: true
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates user and returns JWT tokens
      operationId: loginUser
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "john@example.com"
              password: "SecurePass123!"
              rememberMe: true
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                accessToken: "eyJhbGciOiJIUzUxMiJ9..."
                refreshToken: "eyJhbGciOiJIUzUxMiJ9..."
                tokenType: "Bearer"
                expiresIn: 86400
                user:
                  id: "550e8400-e29b-41d4-a716-446655440000"
                  username: "john_doe"
                  email: "john@example.com"
                  firstName: "John"
                  lastName: "Doe"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Generates new access token using refresh token
      operationId: refreshToken
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            example:
              refreshToken: "eyJhbGciOiJIUzUxMiJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidates user session and tokens
      operationId: logoutUser
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              example:
                message: "Logged out successfully"
                success: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      description: Fetches information about the currently authenticated user
      operationId: getCurrentUser
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                id: "550e8400-e29b-41d4-a716-446655440000"
                username: "john_doe"
                email: "john@example.com"
                firstName: "John"
                lastName: "Doe"
                fullName: "John Doe"
                profilePicture: null
                isActive: true
                emailVerified: true
                createdAt: "2025-01-01T10:00:00"
                lastLoginAt: "2025-08-07T20:00:00"
        '401':
          description: Unauthorized - invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 401
                error: "Unauthorized"
                message: "Access denied. Please provide valid authentication credentials."
                path: "/api/auth/me"
                timestamp: "2025-08-07T20:00:00"


  /api/tasks:
    get:
      tags:
        - Tasks
      summary: Get user tasks
      description: Retrieves paginated list of user tasks with filtering options
      operationId: getTasks
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: sortBy
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            default: "createdAt"
            enum: [ "createdAt", "updatedAt", "title", "dueDate", "priority", "status" ]
        - name: sortDirection
          in: query
          description: Sort direction
          required: false
          schema:
            type: string
            default: "desc"
            enum: [ "asc", "desc" ]
        - name: status
          in: query
          description: Filter by task status
          required: false
          schema:
            $ref: '#/components/schemas/TaskStatus'
        - name: priority
          in: query
          description: Filter by task priority
          required: false
          schema:
            $ref: '#/components/schemas/TaskPriority'
        - name: projectId
          in: query
          description: Filter by project ID
          required: false
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          description: Search in title and description
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTaskResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Tasks
      summary: Create a new task
      description: Creates a new task for the authenticated user
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
            example:
              title: "Complete project documentation"
              description: "Write comprehensive documentation for the task management system"
              priority: "HIGH"
              dueDate: "2025-08-15T17:00:00"
              projectId: "550e8400-e29b-41d4-a716-446655440001"
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/tasks/{taskId}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: Retrieves a specific task by its ID
      operationId: getTask
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Tasks
      summary: Update task
      description: Updates an existing task
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
            example:
              title: "Updated task title"
              description: "Updated description"
              status: "IN_PROGRESS"
              priority: "MEDIUM"
              dueDate: "2025-08-20T17:00:00"
              projectId: "550e8400-e29b-41d4-a716-446655440001"
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Soft deletes a task
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              example:
                message: "Task deleted successfully"
                success: true
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - firstName
        - lastName
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          description: Username (alphanumeric, hyphens, underscores only)
        email:
          type: string
          format: email
          maxLength: 100
          description: User email address
        firstName:
          type: string
          maxLength: 50
          description: User first name
        lastName:
          type: string
          maxLength: 50
          description: User last name
        password:
          type: string
          minLength: 8
          description: Password (min 8 chars, must contain uppercase, lowercase, digit, special char)

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          description: User password
        rememberMe:
          type: boolean
          default: false
          description: Remember user session

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token

    TaskCreateRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          maxLength: 100
          description: Task title
        description:
          type: string
          maxLength: 1000
          description: Task description
        priority:
          $ref: '#/components/schemas/TaskPriority'
        dueDate:
          type: string
          format: date-time
          description: Task due date
        projectId:
          type: string
          format: uuid
          description: Project ID to assign task to

    TaskUpdateRequest:
      type: object
      required:
        - title
        - status
        - priority
      properties:
        title:
          type: string
          maxLength: 100
          description: Task title
        description:
          type: string
          maxLength: 1000
          description: Task description
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/TaskPriority'
        dueDate:
          type: string
          format: date-time
          description: Task due date
        projectId:
          type: string
          format: uuid
          description: Project ID to assign task to

    AuthResponse:
      type: object
      properties:
        message:
          type: string
          description: Response message
        userId:
          type: string
          format: uuid
          description: Created user ID
        success:
          type: boolean
          description: Operation success status

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token
        tokenType:
          type: string
          default: "Bearer"
          description: Token type
        expiresIn:
          type: integer
          format: int64
          description: Access token expiration time in seconds
        user:
          $ref: '#/components/schemas/UserResponse'

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: New JWT access token
        refreshToken:
          type: string
          description: New JWT refresh token
        tokenType:
          type: string
          default: "Bearer"
          description: Token type
        expiresIn:
          type: integer
          format: int64
          description: Access token expiration time in seconds
        refreshExpiresIn:
          type: integer
          format: int64
          description: Refresh token expiration time in seconds

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          description: Response message
        success:
          type: boolean
          description: Operation success status
        timestamp:
          type: string
          format: date-time
          description: Response timestamp
        code:
          type: string
          description: Error code (if applicable)

    TaskResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Task ID
        title:
          type: string
          description: Task title
        description:
          type: string
          description: Task description
        status:
          $ref: '#/components/schemas/TaskStatus'
        priority:
          $ref: '#/components/schemas/TaskPriority'
        dueDate:
          type: string
          format: date-time
          description: Task due date
        createdAt:
          type: string
          format: date-time
          description: Task creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Task last update timestamp
        completedAt:
          type: string
          format: date-time
          description: Task completion timestamp
        projectName:
          type: string
          description: Associated project name
        projectId:
          type: string
          format: uuid
          description: Associated project ID
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentResponse'
          description: Task attachments
        isOverdue:
          type: boolean
          description: Whether task is overdue
        isDueToday:
          type: boolean
          description: Whether task is due today

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        username:
          type: string
          description: Username
        email:
          type: string
          format: email
          description: User email
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        fullName:
          type: string
          description: User full name
        profilePicture:
          type: string
          description: Profile picture URL
        isActive:
          type: boolean
          description: Account active status
        emailVerified:
          type: boolean
          description: Email verification status
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        lastLoginAt:
          type: string
          format: date-time
          description: Last login timestamp

    AttachmentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Attachment ID
        filename:
          type: string
          description: File name
        originalFilename:
          type: string
          description: Original file name
        mimeType:
          type: string
          description: File MIME type
        fileSize:
          type: integer
          format: int64
          description: File size in bytes
        formattedFileSize:
          type: string
          description: Human-readable file size
        fileExtension:
          type: string
          description: File extension
        isImage:
          type: boolean
          description: Whether file is an image
        uploadedAt:
          type: string
          format: date-time
          description: Upload timestamp

    PageTaskResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
          description: List of tasks
        pageable:
          $ref: '#/components/schemas/Pageable'
        totalElements:
          type: integer
          format: int64
          description: Total number of elements
        totalPages:
          type: integer
          description: Total number of pages
        first:
          type: boolean
          description: Whether this is the first page
        last:
          type: boolean
          description: Whether this is the last page

    Pageable:
      type: object
      properties:
        pageNumber:
          type: integer
          description: Current page number
        pageSize:
          type: integer
          description: Page size
        sort:
          $ref: '#/components/schemas/Sort'

    Sort:
      type: object
      properties:
        sorted:
          type: boolean
          description: Whether the results are sorted
        direction:
          type: string
          enum: [ "ASC", "DESC" ]
          description: Sort direction
        property:
          type: string
          description: Sort property

    TaskStatus:
      type: string
      enum:
        - TODO
        - IN_PROGRESS
        - DONE
        - CANCELLED
      description: Task status

    TaskPriority:
      type: string
      enum:
        - LOW
        - MEDIUM
        - HIGH
        - CRITICAL
      description: Task priority level

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message
        path:
          type: string
          description: Request path
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
