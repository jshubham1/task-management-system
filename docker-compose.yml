version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15
    container_name: task_management_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: task_management
      POSTGRES_USER: task_user
      POSTGRES_PASSWORD: SecurePassword123!
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      # Named volume for data persistence[1][3]
      - postgres_data:/var/lib/postgresql/data
      # Optional: Initialization scripts
      - ./backend/src/main/resources/db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - task_management_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U task_user -d task_management" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Spring Boot Backend Service
  backend:
    build:
      context: ./backend/task-management-api
      dockerfile: Dockerfile
    container_name: task_management_api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/task_management
      SPRING_DATASOURCE_USERNAME: task_user
      SPRING_DATASOURCE_PASSWORD: SecurePassword123!
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

      # JPA/Hibernate Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect

      # JDK 21 Virtual Threads
      SPRING_THREADS_VIRTUAL_ENABLED: true

      # JWT Configuration
      JWT_SECRET: myVerySecretJWTKeyForTaskManagementSystem2025
      JWT_EXPIRATION: 86400000
      JWT_REFRESH_EXPIRATION: 2592000000

      # CORS Configuration
      APP_CORS_ALLOWED_ORIGINS: http://localhost:3000

      # Mail Configuration (optional)
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: ${MAIL_USERNAME:-your-email@gmail.com}
      SPRING_MAIL_PASSWORD: ${MAIL_PASSWORD:-your-app-password}

      # Logging Configuration
      LOGGING_LEVEL_COM_TASKMANAGEMENT: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: WARN

      # Server Configuration
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    networks:
      - task_management_network

  # Next.js Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: task_management_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_started
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080
    ports:
      - "3000:3000"
    networks:
      - task_management_network


# Named Volumes for Data Persistence
volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

# Networks
networks:
  task_management_network:
    driver: bridge
